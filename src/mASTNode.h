#include <vector>
using namespace std;

#include "mToken.h"

#ifndef M_ASTNODE
#define M_ASTNODE

enum NODE_TYPE {
	SSQL_STMT, CREATE_STMT, INSERT_STMT, DELETE_STMT, QUERY_STMT,
	G_CREATE, G_TABLE, G_ID, G_LEFT_PAREM, G_DECL_LIST, G_RIGHT_PAREM, DECL, DECL_, DECL_LIST, DECL_LIST_, G_INT, G_DEFAULT, DEFAULT_SPEC, DEFAULT_SPEC_, G_PRIMARY, G_KEY, COLUMN_LIST, G_ASSIGN, G_NUM, G_EPSILON, COLUMN_LIST_,
	G_INSERT, G_INTO, G_VALUES, VALUE_LIST, VALUE_LIST_, G_COMMA, G_ENDL,
	G_DELETE, G_FROM,
	G_SELECT, SELECT_LIST, SELECT_LIST_, SIMPLE_EXPR, SIMPLE_TERM, SIMPLE_TERM_, G_ADD, G_SUB, G_MUL, G_DIV, SIMPLE_UNARY, SIMPLE_UNARY_, EXPR_, TERM_, UNARY_, SIMPLE_EXPR_,
	WHERE_CLAUSE, WHERE_CLAUSE_, G_WHERE, DISJUNCT, DISJUNCT_, CONJUNCT, CONJUNCT_, BOOL, BOOL_, G_AND, G_OR, G_NOT, COMP, EXPR, ROP, ROP_, TERM, UNARY,
	G_LESS, G_LESS_EQUAL, G_GREATER, G_GREATER_EQUAL, G_EQUAL, G_NOT_EQUAL, G_ENTER
};

struct mASTNode {
    NODE_TYPE type;
    bool isToken;
    mToken* token;
    vector<mASTNode*> childs;
    mASTNode (NODE_TYPE type, bool istoken = false, mToken* token = NULL) : type(type), isToken(istoken), token(token) {};
};

#endif